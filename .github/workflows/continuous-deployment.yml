name: Continuous Deployment

on:
  workflow_dispatch:
  schedule:
    - cron: '42 0 * * 0'
  push:
    branches:
      - master
    paths-ignore:
      - README.md
      - .vscode
      - .editorconfig
      - .gitignore

jobs:
  run-linter:
    name: Run Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node_modules
        uses: actions/cache@v2
        env:
          CACHE_NAME: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('**/yarn.lock', '**/package-lock.json') }}

      - name: Install dependencies
        run: yarn install

      - name: Run linter
        run: yarn lint

  build:
    needs: run-linter
    name: Build
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Pull images from registry
        run: make pull || true

      - name: Build images
        run: make build

      - name: Push images to registry
        run: make push

  deploy-to-production:
    needs: build
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create SSH key to production
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEYSCAN }}" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create and use remote context
        run: |
          docker context create remote --docker "host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          docker context use remote

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Pull images from registry
        run: make pull

      - name: Start containers
        run: make run

      - name: Prune old images
        run: docker image prune -f
